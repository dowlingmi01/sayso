<?php

$starbar = $this->starbar;
/* @var $starbar Starbar */

$game = $this->game;
/* @var $game Game_Starbar */

?>
<script type="text/javascript">
	/**
	 * Purpose of this code is to represent the browser app for testing/development
	 * Whatever app state is set in the KRL, should be represented here.
	 * Starbar, auth key are hard coded to Hello Music
	 * User is hard-coded
	 * User session is dynamic
	 */
	$SQ(function () {
		var sayso = {};
		sayso.debug = false;
		sayso.baseDomain = '<?= BASE_DOMAIN ?>';
		sayso.environment = '<?= Registry::getPseudoEnvironmentName() ?>';
		sayso.log = _log('log');
		sayso.warn = _log('warn');
		function _log (type) { // <-- closure here allows re-use for log() and warn()
			return function () {
				if (sayso.debug && typeof window.console !== 'undefined' && typeof window.console.log !== 'undefined') {
					var args = Array.prototype.slice.call(arguments);
					if (typeof console.log.apply === 'function') {
						args.unshift('SaySo:');
						window.console[type].apply(window.console, args);
					} else {
						// must be IE
						if (typeof args[0] !== 'object') {
							window.console.log(args[0]);
						}
					}
				}
			}
		};
		sayso.starbar = {
			id : <?= $starbar->getId() ?>,
			shortName : '<?= $starbar->short_name ?>',
			kynetxAppId : 'a239x20', // <-- this doesn't matter in this context
			authKey : '<?= $starbar->auth_key ?>',
			user : {
				id : <?= Api_UserSession::getInstance()->getId() ?>,
				key : '<?= Api_UserSession::getInstance()->getKey() ?>'
			},
			<? if ($game && $game->getGamer() && $game->getLevels()) { ?>
				game : <?= $this->game->export(new ObjectExporter_Json()) ?>,
			<? } ?>
			state : {
				visibility : 'open',
				local : {}
			},
			loaded : true
		};


		// Support for stupid browsers

		function getInternetExplorerVersion() {
			var rv = -1; // Return value assumes failure.
			if (navigator.appName == 'Microsoft Internet Explorer') {
				var ua = navigator.userAgent;
				var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
				if (re.exec(ua) != null)
					rv = parseFloat(RegExp.$1);
			}
			return rv;
		}

		function getGeckoVersion() {
			var rv = -1; // Return value assumes failure.
			fullVersion = navigator.userAgent.replace(/^Mozilla.*rv:|\).*$/g, '' ) || ( /^rv\:Â¦\).*$/g, '' );
			if (fullVersion) {
				rv = fullVersion.substring(0,3);
			}
			return rv;
		}

		var ieVersion = getInternetExplorerVersion();
		var geckoVersion = getGeckoVersion();
		if (ieVersion > -1 && ieVersion < 9) {
			sayso.disableJqueryEffects = true;
			sayso.jsonSupportMissing = true;
		} else {
			sayso.disableJqueryEffects = false;
			sayso.jsonSupportMissing = false;
		}

		// test if HTML5 placeholder is supported or not
		if (ieVersion > -1 || (geckoVersion > -1 && geckoVersion < 4)) {
			sayso.placeholderSupportMissing = true;
		} else {
			sayso.placeholderSupportMissing = false;
		}

		if (sayso.disableJqueryEffects) {
			$SQ.fx.off = true;
		}

		sayso.log(sayso.starbar);

		$SQ.sayso = sayso;
	});

	$SQ('body').css('margin', 0);
</script>
<script src="//<?= BASE_DOMAIN ?>/js/starbar/easyXDM.min.js" type="text/javascript"></script>
<script src="//<?= BASE_DOMAIN ?>/js/starbar/sayso-shared.js" type="text/javascript"></script>
<script type="text/javascript">

	var protocol = ('https:' == document.location.protocol ? 'https:' : 'http:');

	$SQ.remoteControl = new easyXDM.Rpc({
		remote: protocol+"//<?= BASE_DOMAIN ?>/html/communicator.html",
		local: protocol+"//<?= BASE_DOMAIN ?>/html/communicator.html",
		swf: protocol+"//<?= BASE_DOMAIN ?>/swf/easyxdm.swf"
	}, {
		// functions available to remote pages
		remote: {
			loadComplete: {},
			updateGame: {},
			handleTweet: {},
			openSurvey: {},
			hideOverlay: {},
			alertMessage: {}
		},
		local: {}
	});

</script>
