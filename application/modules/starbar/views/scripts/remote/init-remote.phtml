<?php

switch (APPLICATION_ENV) {
    case 'development' :
        $env = 'LOCAL'; break;
    case 'sandbox' :
        $env = 'DEV'; break;
    case 'testing' :
        $env = 'TEST'; break;
    case 'staging' :
        $env = 'STAGING'; break;
    case 'production' :
    default :
        $env = 'PRODUCTION'; break;
}

?>
<script type="text/javascript">
    /**
     * Purpose of this code is to represent the browser app for testing/development
     * Whatever app state is set in the KRL, should be represented here.
     * Starbar, auth key are hard coded to Hello Music
     * User is hard-coded 
     * User session is dynamic
     */
    $SQ(function () {
        var baseDomain = "<?= BASE_DOMAIN ?>";
        if (!window.sayso) window.sayso = {};
        window.sayso.debug = true;
        window.sayso.baseDomain = baseDomain;
        window.sayso.environment = '<?= $env ?>';
        window.sayso.log = _log('log'); 
        window.sayso.warn = _log('warn');
        function _log (type) { // <-- closure here allows re-use for log() and warn()
            return function () {
                if (window.sayso.debug && typeof window.console !== 'undefined' && typeof window.console.log !== 'undefined') {
                    var args = Array.prototype.slice.call(arguments);
                    if (typeof console.log.apply === 'function') {
                        args.unshift('SaySo:');
                        window.console[type].apply(window.console, args);
                    } else {
                        // must be IE
                        if (typeof args[0] !== 'object') {
                            window.console.log(args[0]);
                        }
                    }
                }
            }
        };
        window.sayso.starbar = {
            id : 1, // hellomusic
            short_name : 'hellomusic',
            kynetxAppId : 'a239x20', // <-- this doesn't matter in this context
            authKey : '<?= Api_Registry::getConfig()->helloMusic->api->authKey ?>',
            user : {
                id : <?= Api_UserSession::getInstance()->getId() ?>,
                key : '<?= Api_UserSession::getInstance()->getKey() ?>'
            },
            state : {
                visibility : 'starbar-visOpen'
            },
            loaded : true
        };
        if (typeof(KOBJ) === 'undefined') {
            KOBJ = { 
                warn : function () { 
                    console.warn('Requested action has limited functionality outside of browser app.'); 
                },
                get_application : function () { 
                    return { 
                        raise_event : function () { KOBJ.warn(); }
                    } 
                }
            };
        }
    });

	$SQ.ajaxWithAuth = function (options) {
	    var starbar_id = null;
	    var auth_key = null;
	    var user_id = null;
	    var user_key = null;

	    sayso = window.sayso;
	    
	    // Authenticated?
	    try
	    {
	        starbar_id = sayso.starbar.id;
	        user_id = sayso.starbar.user.id;
	        user_key = sayso.starbar.user.key;
	        auth_key = sayso.starbar.authKey;
	    }
	    catch (e) {}
	    
	    if (typeof sayso == "undefined") {
	    // setup global "safe" logging functions
	    window.sayso.log = _log('log'); 
	    window.sayso.warn = _log('warn');
	    function _log (type) { // <-- closure here allows re-use for log() and warn()
	        return function () {
	            if (window.sayso.debug && typeof window.console !== 'undefined' && typeof window.console.log !== 'undefined') {
	                var args = Array.prototype.slice.call(arguments);
	                if (typeof console.log.apply === 'function') {
	                    args.unshift('SaySo:');
	                    window.console[type].apply(window.console, args);
	                } else {
	                    // must be IE
	                    if (typeof args[0] !== 'object') {
	                        window.console.log(args[0]);
	                    }
	                }
	            }
	        }
	    };
	    
	    var sayso = window.sayso;
		}
	    
	    options.data = $SQ.extend(options.data || {}, {
	        starbar_id : starbar_id,
	        user_id : user_id,
	        user_key : user_key,
	        auth_key : auth_key
	    });

	    if (!options.dataType)
    		options.dataType = 'jsonp';

		options.beforeSend = function(x) {
			if (x && x.overrideMimeType) {
				x.overrideMimeType("application/j-son;charset=UTF-8");
			}
		};
	    return $SQ.ajax(options);
	};
</script>
